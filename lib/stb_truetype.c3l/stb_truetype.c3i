module stb_truetype;
import stb_rect_pack;

struct Buffer
{
    char* data;
    int cursor;
    int size;
}

struct BakedChar
{
    ushort x0; ushort y0; ushort x1; ushort y1; // coordinates of bbox in bitmap
    float xoff; float yoff; float xadvance;
}

// if return is positive, the first unused row of the bitmap
// if return is negative, returns the negative of the number of characters that fit
// if return is 0, no characters fit and no rows were used
// This uses a very crappy packing.
fn int bakeFontBitmap(char* data, int offset,        // font location (use offset=0 for plain .ttf
                      float pixel_height,            // height of font in pixels
                      char* pixels, int pw, int ph,  // bitmap to be filled in
                      int first_char, int num_chars, // characters to bake
                      BakedChar* chardata)           // you allocate this, it's num_chars long
                      @extern("stbtt_BakeFontBitmap");

struct AlignedQuad
{
    float x0; float y0; float s0; float t0; // top-left
    float x1; float y1; float s1; float t1; // bottom-right
}

// Call GetBakedQuad with char_index = 'character - first_char', and it
// creates the quad you need to draw and advances the current position.
//
// The coordinate system used assumes y increases downwards.
//
// Characters will extend both above and below the current position;
// see discussion of "BASELINE" above.
//
// It's inefficient; you might want to c&p it and optimize it.
fn void stbtt_GetBakedQuad(BakedChar* chardata, int pw, int ph,  // same data as above
                           int char_index,                       // character to display
                           float* xpos, float* ypos,             // pointers to current position in screen pixel space
                           AlignedQuad* q,                       // output: quad to draw
                           int opengl_fillrule)                  // true if opengl fill rule; false if DX9 or earlier
                           @extern("stbtt_GetBakedQuad");

// Query the font vertical metrics without having to create a font first.
fn void stbtt_GetScaledFontVMetrics(char* fontdata, int index, float size, float* ascent, float* descent, float* lineGap) @extern("stbtt_GetScaledFontVMetrics");


struct PackedChar
{
    ushort x0; ushort y0; ushort x1; ushort y1; // coordinates of bbox in bitmap
    float xoff; float yoff; float xadvance;
    float xoff2; float yoff2;
    int codepoint;
}

// Initializes a packing context stored in the passed-in stbtt_Pack_context.
// Future calls using this context will pack characters into the bitmap passed
// in here: a 1-channel bitmap that is width * height. stride_in_bytes is
// the distance from one row to the next (or 0 to mean they are packed tightly
// together). "padding" is the amount of padding to leave between each
// character (normally you want '1' for bitmaps you'll use as textures with
// bilinear filtering).
//
// Returns 0 on failure, 1 on success.
fn int packBegin(PackContext* spc, char* pixels, int width, int height, int stride_in_bytes, int padding, void* alloc_context) @extern("stbtt_PackBegin");

// Cleans up the packing context and frees all memory.
fn void packEnd(PackContext *spc) @extern("stbtt_PackEnd");

macro pointsize(x) => -x;

// Creates character bitmaps from the font_index'th font found in fontdata (use
// font_index=0 if you don't know what that is). It creates num_chars_in_range
// bitmaps for characters with unicode values starting at first_unicode_char_in_range
// and increasing. Data for how to render them is stored in chardata_for_range;
// pass these to stbtt_GetPackedQuad to get back renderable quads.
//
// font_size is the full height of the character from ascender to descender,
// as computed by stbtt_ScaleForPixelHeight. To use a point size as computed
// by stbtt_ScaleForMappingEmToPixels, wrap the point size in STBTT_POINT_SIZE()
// and pass that result as 'font_size':
//       ...,                  20 , ... // font max minus min y is 20 pixels tall
//       ..., stbtt_POINT_SIZE(20), ... // 'M' is 20 pixels tall
fn int packFontRange(PackContext* spc, char* fontdata, int font_index, float font_size,
                     int first_unicode_char_in_range, int num_chars_in_range,
                     PackedChar* chardata_for_range) @extern("stbtt_PackFontRange");

struct PackRange
{
    float font_size;
    int first_unicode_codepoint_in_range;  // if non-zero, then the chars are continuous, and this is the first codepoint
    int* array_of_unicode_codepoints;       // if non-zero, then this is an array of unicode codepoints
    int num_chars;
    PackedChar* chardata_for_range; // output
    char h_oversample; char v_oversample; // don't set these, they're used internally
}

// Creates character bitmaps from multiple ranges of characters stored in
// ranges. This will usually create a better-packed bitmap than multiple
// calls to stbtt_PackFontRange. Note that you can call this multiple
// times within a single PackBegin/PackEnd.
fn int packFontRanges(PackContext* spc, char* fontdata, int font_index, PackRange* ranges, int num_ranges) @extern("stbtt_PackFontRanges");

// Oversampling a font increases the quality by allowing higher-quality subpixel
// positioning, and is especially valuable at smaller text sizes.
//
// This function sets the amount of oversampling for all following calls to
// stbtt_PackFontRange(s) or stbtt_PackFontRangesGatherRects for a given
// pack context. The default (no oversampling) is achieved by h_oversample=1
// and v_oversample=1. The total number of pixels required is
// h_oversample*v_oversample larger than the default; for example, 2x2
// oversampling requires 4x the storage of 1x1. For best results, render
// oversampled textures with bilinear filtering. Look at the readme in
// stb/tests/oversample for information about oversampled fonts
//
// To use with PackFontRangesGather etc., you must set it before calls
// call to PackFontRangesGatherRects.
fn void stbtt_PackSetOversampling(PackContext* spc, uint h_oversample, uint v_oversample) @extern("stbtt_PackSetOversampling");

// If skip != 0, this tells stb_truetype to skip any codepoints for which
// there is no corresponding glyph. If skip=0, which is the default, then
// codepoints without a glyph recived the font's "missing character" glyph,
// typically an empty box by convention.
fn void packSetSkipMissingCodepoints(PackContext* spc, int skip) @extern("stbtt_PackSetSkipMissingCodepoints");

fn void getPackedQuad(PackedChar* chardata, int pw, int ph,  // same data as above
                      int char_index,                       // character to display
                      float* xpos, float* ypos,             // pointers to current position in screen pixel space
                      AlignedQuad* q,                       // output: quad to draw
                      int align_to_integer) @extern("stbtt_GetPackedQuad");

// Calling these functions in sequence is roughly equivalent to calling
// stbtt_PackFontRanges(). If you more control over the packing of multiple
// fonts, or if you want to pack custom data into a font texture, take a look
// at the source to of stbtt_PackFontRanges() and create a custom version
// using these functions, e.g. call GatherRects multiple times,
// building up a single array of rects, then call PackRects once,
// then call RenderIntoRects repeatedly. This may result in a
// better packing than calling PackFontRanges multiple times
// (or it may not).
fn int  packFontRangesGatherRects(PackContext* spc, FontInfo* info, PackRange* ranges, int num_ranges, Rect* rects) @extern("stbtt_PackFontRangesGatherRects");
fn void packFontRangesPackRects(PackContext* spc, Rect* rects, int num_rects) @extern("stbtt_PackFontRangesPackRects");
fn int  packFontRangesRenderIntoRects(PackContext* spc, FontInfo* info, PackRange* ranges, int num_ranges, Rect* rects) @extern("stbtt_PackFontRangesRenderIntoRects");

// this is an opaque structure that you shouldn't mess with which holds
// all the context needed from PackBegin to PackEnd.
struct PackContext
{
    void* user_allocator_context;
    void* pack_info;
    int   width;
    int   height;
    int   stride_in_bytes;
    int   padding;
    int   skip_missing;
    uint  h_oversample; uint v_oversample;
    char* pixels;
    void*  nodes;
}

//////////////////////////////////////////////////////////////////////////////
//
// FONT LOADING
//
//

// This function will determine the number of fonts in a font file.  TrueType
// collection (.ttc) files may contain multiple fonts, while TrueType font
// (.ttf) files only contain one font. The number of fonts can be used for
// indexing with the previous function where the index is between zero and one
// less than the total fonts. If an error occurs, -1 is returned.
fn int getNumberOfFonts(char* data) @extern("stbtt_GetNumberOfFonts");

// Each .ttf/.ttc file may have more than one font. Each font has a sequential
// index number starting from 0. Call this function to get the font offset for
// a given index; it returns -1 if the index is out of range. A regular .ttf
// file will only define one font and it always be at offset 0, so it will
// return '0' for index 0, and -1 for all other indices.
fn int getFontOffsetForIndex(char* data, int index) @extern("stbtt_GetFontOffsetForIndex");

// The following structure is defined publicly so you can declare one on
// the stack or as a global or etc, but you should treat it as opaque.
struct FontInfo
{
    void*            userdata;
    char*            data;              // pointer to .ttf file
    int              fontstart;         // offset of start of font
    
    int numGlyphs;                     // number of glyphs, needed for range checking
    
    // table locations as offset from start of .ttf
    int loca; int head; int glyf; int hhea; int hmtx; int kern; int gpos; int svg;
    int index_map;                     // a cmap mapping for our chosen character encoding
    int indexToLocFormat;              // format needed to map from glyph index to glyph
    
    Buffer cff;                    // cff font data
    Buffer charstrings;            // the charstring index
    Buffer gsubrs;                 // global charstring subroutines index
    Buffer subrs;                  // private charstring subroutines index
    Buffer fontdicts;              // array of font dicts
    Buffer fdselect;               // map from glyph to fontdict
}

// Given an offset into the file that defines a font, this function builds
// the necessary cached info for the rest of the system. You must allocate
// the stbtt_Fontinfo yourself, and stbtt_InitFont will fill it out. You don't
// need to do anything special to free it, because the contents are pure
// value data with no additional data structures. Returns 0 on failure.
fn int initFont(FontInfo* info, char* data, int offset) @extern("stbtt_InitFont");


//////////////////////////////////////////////////////////////////////////////
//
// CHARACTER TO GLYPH-INDEX CONVERSION

// If you're going to perform multiple operations on the same character
// and you want a speed-up, call this function with the character you're
// going to process, then use glyph-based functions instead of the
// codepoint-based functions.
// Returns 0 if the character codepoint is not defined in the font.
fn int findGlyphIndex(FontInfo* info, int unicode_codepoint) @extern("stbtt_FindGlyphIndex");


//////////////////////////////////////////////////////////////////////////////
//
// CHARACTER PROPERTIES
//

// computes a scale factor to produce a font whose "height" is 'pixels' tall.
// Height is measured as the distance from the highest ascender to the lowest
// descender; in other words, it's equivalent to calling stbtt_GetFontVMetrics
// and computing:
//       scale = pixels / (ascent - descent)
// so if you prefer to measure height by the ascent only, use a similar calculation.
fn float scaleForPixelHeight(FontInfo* info, float pixels) @extern("stbtt_ScaleForPixelHeight");

// computes a scale factor to produce a font whose EM size is mapped to
// 'pixels' tall. This is probably what traditional APIs compute, but
// I'm not positive.
fn float scaleForMappingEmToPixels(FontInfo* info, float pixels) @extern("stbtt_ScaleForMappingEmToPixels");

